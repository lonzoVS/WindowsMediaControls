<Window x:Class="WindowsMediaControls.MainWindow" WindowStyle="None" ResizeMode="NoResize" 
 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ie="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:WindowsMediaControls.ViewModel"
        xmlns:extensions="clr-namespace:WindowsMediaControls.Extensions"
        xmlns:properties="clr-namespace:WindowsMediaControls.Properties"
        xmlns:local="clr-namespace:WindowsMediaControls"
        xmlns:converters="clr-namespace:WindowsMediaControls.Converters"
        xmlns:cmd1="http://www.galasoft.ch/mvvmlight"
        mc:Ignorable="d"
        Title="MainWindow" Height="117.748" Width="678.01"
        AllowsTransparency="True">

    <Window.Resources>
        <converters:KeyConverter x:Key="KeyConverter"/>
        <converters:ModifierConverter x:Key="ModifierConverter"/>
        <Style x:Key="inputTextBox"  TargetType="{x:Type TextBox}">
            <Setter Property="Control.Foreground" Value="Blue"></Setter>
            <Setter Property="IsReadOnly" Value="True"></Setter>
            <Setter Property="IsReadOnlyCaretVisible" Value="False"></Setter>
            <Setter Property="IsUndoEnabled" Value="False"></Setter>

            <Style.Triggers>
                <Trigger Property="Control.IsFocused" Value="True">
                    <Setter Property="Control.Foreground" Value="Black" />
                    <Setter Property="Control.Background" Value="White" />
                </Trigger>
                <Trigger Property="Control.IsFocused" Value="False">
                    <Setter Property="Control.Foreground" Value="White" />
                    <Setter Property="Control.Background" Value="Transparent" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="BasicButton" TargetType="{x:Type Button}">
            <Setter Property="BorderThickness" Value="0"/>

            <Setter Property="Background" Value="#5000"/>

        </Style>
        <Style x:Key="CloseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicButton}">
            <Setter Property="Foreground" Value="IndianRed"/>
            <Setter Property="Template">
                <Setter.Value>
                    
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}"
                        BorderThickness="{TemplateBinding Background}">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="IndianRed" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="HoverClickButton" TargetType="{x:Type Button}" BasedOn="{StaticResource BasicButton}">
            <Setter Property="Foreground" Value="DeepSkyBlue"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border x:Name="border" Background="{TemplateBinding Background}"
                        
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="Transparent">

                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        
                        <ControlTemplate.Triggers>

                                <!--<Setter Property="Background" Value="Silver"/>-->
                                <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="border" Property="BorderThickness" Value="1"/>
                                <Setter TargetName="border" Property="BorderBrush" Value="DeepSkyBlue"/>
                                </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Silver" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="RotateStyle" TargetType="{x:Type Path}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=GesturesEnabled}" Value="True">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Name="In">
                            <Storyboard >
                                <ColorAnimation To="DeepSkyBlue" 
                                            Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd"
                                            Duration="0:0:0.5"/>

                                <DoubleAnimation AccelerationRatio="1"  From="0" To="360" Duration="0:0:0.5"  
                                          Storyboard.TargetProperty="(RenderTransform).Children[0].Angle">
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard >
                                <ColorAnimation To="Silver" 
                                            Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd"
                                            Duration="0:0:0.5"/>

                                <DoubleAnimation AccelerationRatio="1"  To="0" Duration="0:0:0.5"  
                                          Storyboard.TargetProperty="(RenderTransform).Children[0].Angle">
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>

                    </DataTrigger.ExitActions>
                </DataTrigger>
                <DataTrigger Binding="{Binding Source={x:Static properties:Settings.Default}, Path=GesturesEnabled}" Value="False">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard Name="Out">
                            <Storyboard >
                                <ColorAnimation To="Silver" 
                                            Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd"
                                            Duration="0:0:0.5"
                                            />
                                <DoubleAnimation AccelerationRatio="1"  To="0" Duration="0:0:0.5"  
                                          Storyboard.TargetProperty="(RenderTransform).Children[0].Angle"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard >
                                <ColorAnimation  To="DeepSkyBlue" 
                                            Storyboard.TargetProperty="(Path.Fill).(SolidColorBrush.Color)" 
                                            FillBehavior="HoldEnd"
                                            Duration="0:0:0.5"
                                            />
                                <DoubleAnimation AccelerationRatio="1"  To="360" Duration="0:0:0.5"  
                                          Storyboard.TargetProperty="(RenderTransform).Children[0].Angle"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TunrOffButtonStyle" BasedOn="{StaticResource BasicButton}" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Path RenderTransformOrigin="0.5,0.5"  x:Name="MyPath" Stretch="Uniform" Fill="Silver" Style="{StaticResource RotateStyle}"
                                    Data="M 17.137077 46.630856 C 12.155078 44.82795 6.0144311 39.242655 3.9031198 34.593761 -0.59068406 24.698859 3.0745839 11.445377 11.842603 5.8848639 14.34453 4.2981888 16.97846 3 17.695781 3 20.254169 3 18.930777 4.8505238 14.526578 7.4315563 6.521729 12.12271 2.8053422 21.614148 5.4656954 30.572529 7.9309375 38.8739 16.005714 45 24.482459 45 36.13844 45 44.956076 36.386342 44.956076 25 44.956076 17.020698 39.489289 8.6348125 32.587161 6.0264578 30.457245 5.2215503 29.97192 4.6280803 30.781526 3.8184743 33.764141 0.83585865 44.559621 10.249077 46.823983 17.806843 52.278199 36.011396 34.769073 53.011594 17.137077 46.630856 Z m 6.294541 -21.94846 C 22.352177 21.869417 23.480511 2.6688932 24.75 2.2478815 25.703906 1.9315295 26 4.6955743 26 13.916667 26 21.550684 25.620224 26 24.968615 26 c -0.567261 0 -1.25891 -0.592922 -1.536997 -1.317604 z">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </Window.Resources>
    <Window.Background>
        <SolidColorBrush Opacity="0.5" Color="Black"/>
    </Window.Background>
    <Window.DataContext>
        <viewModels:MediaControlViewModel/>
    </Window.DataContext>
    <!--Main grid-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="PreviewMouseDown">
            <cmd1:EventToCommand Command="{Binding Path=WindowMouseDown}" PassEventArgsToCommand="True"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid Margin="5,10,5,5">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="9*"/>
            <ColumnDefinition Width="272*"/>
            <ColumnDefinition Width="11*"/>
            <ColumnDefinition Width="33*"/>
        </Grid.ColumnDefinitions>

        <!--Minimize/turn off grid-->
        <Grid  Grid.Column="2" Grid.ColumnSpan="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="46*"  />
                <RowDefinition Height="15"  />
                <RowDefinition Height="35*"  />
            </Grid.RowDefinitions>

            <StackPanel Orientation="Horizontal" Grid.Row="1" >
                <CheckBox   IsChecked="{Binding Source={x:Static properties:Settings.Default}, Path=IsStartup, Mode=TwoWay}"  HorizontalAlignment="Left" VerticalAlignment="Top" FontSize="10"  Grid.Row="1" >

                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Checked">
                            <i:InvokeCommandAction Command="{Binding Startup}"/>
                        </i:EventTrigger>
                        <i:EventTrigger EventName="Unchecked">
                            <i:InvokeCommandAction Command="{Binding Startup}"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </CheckBox>
                <Image Source="/icon/windows.png" Margin="0,-2,0,0"/>
                <TextBlock Foreground="White" Text="Startup" Margin="0,-2,0,0" IsEnabled="False"/>
            </StackPanel>
            <Button Content="X"   Style="{StaticResource CloseButton}" HorizontalAlignment="Center"  Width="88"  Grid.Row="2" >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding CloseWindow}" 
                                               CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}}">
                        </i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>




            <Button Style="{StaticResource HoverClickButton}" Grid.Row="0" Background="Transparent">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding EnableGestures}"></i:InvokeCommandAction>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <StackPanel>
                    <Button  Style="{StaticResource TunrOffButtonStyle}" Background="Silver"  Height="42">

                    </Button>
                </StackPanel>
            </Button>


        </Grid>

        <!--Media controls grid-->
        <Grid Grid.ColumnSpan="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="4*" />
                <RowDefinition Height="13*" />

            </Grid.RowDefinitions>

            <Grid.ColumnDefinitions>
                <ColumnDefinition  />
                <ColumnDefinition  />
                <ColumnDefinition  />
                <ColumnDefinition  />
                <ColumnDefinition  />
                <ColumnDefinition  />
                <ColumnDefinition  />
            </Grid.ColumnDefinitions>
            <!--Gesture Boxes-->

            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=PlayPauseGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  
                HorizontalAlignment="Stretch"    BorderThickness="0" Grid.Column="0"
                     extensions:FocusExtension.IsFocused="{Binding IsPlayFocused, Mode=TwoWay}" VerticalAlignment="Bottom" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=PlayPausePreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=BackwardGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"  BorderThickness="0" Grid.Column="1"
                     extensions:FocusExtension.IsFocused="{Binding IsBackwardFocused , Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=BackwardPreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>


            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=ForwardGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"   BorderThickness="0" Grid.Column="2"
                     extensions:FocusExtension.IsFocused="{Binding  IsForwardFocused, Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=ForwardPreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=StopGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"   BorderThickness="0" Grid.Column="3"
                     extensions:FocusExtension.IsFocused="{Binding IsStopFocused, Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=StopPreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </TextBox>
            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=PlusVolumeGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"  BorderThickness="0" Grid.Column="4"
                     extensions:FocusExtension.IsFocused="{Binding IsPlusVolumeFocused, Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=VolumeUpPreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </TextBox>
            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=MinusVolumeGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"   BorderThickness="0" Grid.Column="5"
                     extensions:FocusExtension.IsFocused="{Binding IsMinusVolumeFocused, Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=VolumeDownPreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>

            </TextBox>
            <TextBox Text="{Binding Source={x:Static properties:Settings.Default}, Path=MuteGesture, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                     HorizontalAlignment="Stretch"  BorderThickness="0" Grid.Column="6"
                     extensions:FocusExtension.IsFocused="{Binding IsMuteFocused, Mode=TwoWay}" TextAlignment="Right"
                     Style="{StaticResource inputTextBox}" Margin="0,6,0,0">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="PreviewKeyDown">
                        <cmd1:EventToCommand Command="{Binding Path=MutePreviewKeyDown}" PassEventArgsToCommand="True"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>


            <!--Media Buttons-->
            <Button Content="|>/||" Grid.Row="1" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=PlayPause}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="next" Grid.Row="1" Grid.Column="1" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=Backward}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="prev" Grid.Row="1" Grid.Column="2" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=Forward}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="▒" Grid.Row="1" Grid.Column="3" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=SetStop}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="+" Grid.Row="1" Grid.Column="4" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=PlusVolume}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="-" Grid.Row="1" Grid.Column="5" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=MinusVolume}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>
            <Button Content="mute" Grid.Row="1" Grid.Column="6" Style="{StaticResource HoverClickButton}">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <i:InvokeCommandAction Command="{Binding Path=Mute}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </Button>

        </Grid>

    </Grid>
    <Window.InputBindings>

    </Window.InputBindings>
</Window>
